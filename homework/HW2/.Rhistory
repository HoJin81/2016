pnorm(0, mean=(-1/19), sd=2*sqrt(9/10*10/19), lower.tail=F)
1 - pnorm((0-mu)/(sigma/sqrt(N)))
mu <- -1/19
1 - pnorm((0-mu)/(sigma/sqrt(N)))
N <- 400
B <- 10^5
mu <- -1/19
sigma <- 2*sqrt(9/10*10/19)
error <- replicate(B,{
X <- sample(c(-1,1), N, replace=T, prob=(c(10/19,9/19)))
mean(X)-mu
})
1 - pnorm((0-mu)/(sigma/sqrt(N)))
mean(error > -mu)
1 - pnorm(-sqrt(N)*mu/sigma))
1 - pnorm(-sqrt(N)*mu/sigma)
mean(error > -mu)
qnomr(0.001)
qnorm(0.001)
qnorm(0.999)
pnorm(0.001)
qnorm(0.999)
data(father.son,package="UsingR")
y <- father.son$sheight
hist(y)
mean(y)
## There are many numbers (heights) in a jar and we are picking one per each 25 times...
View(father.son)
N <- 25
B <- 10^5
mu <- mean(y)
standard_dev <- replicate(B,{
X <- sample(c(father.son$fheight, father.son$sheight), N, replace=T)
(mean(X)-mu)*sqrt(N)
})
N <- 25
B <- 10^5
mu <- mean(y)
sigma <- sqrt(mean((y-mu)^2))
mu <- mean(y)
sigma <- sqrt(mean((y-mu)^2))
mu
sigma
N <- 25
mu
sigma/sqrt(N)
mu <- mean(y)
sigma <- sqrt(mean((y-mu)^2))
N <- 25
mu
sigma/sqrt(N)
1 - pnorm(-sqrt(N)*1/sigma)
sigma/sqrt(N)
z = qnorm(0.975)
z
pnorm(z) - pnorm(-z)
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(N)
set.seed(2016)
prob_heads <- sample(c(0.5, 0.6, 0.4),1)
prob_heads <- sample(c(0.5, 0.6, 0.4),1)
prob_heads <- sample(c(0.5, 0.6, 0.4),1)
heads <- sample(c(1,0), 100, replace=T, prob=c(0.5,0.5))
mean(heads)
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(prob_heads,1-prob_heads))
ph_hat <- mean(X)
ph_hat
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(prob_heads,1-prob_heads))
ph_hat <- mean(X)
ph_hat
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(prob_heads,1-prob_heads))
ph_hat <- mean(X)
ph_hat
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ph_hat
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ph_hat
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
ci
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ph_hat
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
ci
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ph_hat
```
2. Is it fair? Use CLT to construct a 95% confidence based on this estimate. http://goo.gl/forms/RCUHxhAFn3
```{r}
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
ci
N <- 100
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ph_hat
```
2. Is it fair? Use CLT to construct a 95% confidence based on this estimate. http://goo.gl/forms/RCUHxhAFn3
```{r}
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
ci
prob_heads<=ci[1] & prob_heads<=ci[2]
rep <- replicate(B, {
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
prob_heads<=ci[1] & prob_heads<=ci[2]
})
rep
rep <- replicate(B, {
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
mean(prob_heads<=ci[1] & prob_heads<=ci[2])
})
rep
mean(rep)
N <- 100
B <- 10^4
rep <- replicate(B, {
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
prob_heads<=ci[1] & prob_heads<=ci[2]
})
mean(rep)
rep <- replicate(B, {
X <- sample(c(0,1), N, replace=T, prob=c(1-prob_heads,prob_heads))
ph_hat <- mean(X)
ci <- ph_hat + c(-1,1)*qnorm(0.975)*sqrt(ph_hat*(1-ph_hat))/sqrt(N)
prob_heads>=ci[1] & prob_heads<=ci[2]
})
mean(rep)
library(readr)
filename <- "https://raw.githubusercontent.com/datasciencelabs/data/master/blue-bead-comp-results.csv"
tab <- read_csv(filename)
names(tab)<-c("timestamp", "name", "estimate","N","ci")
View(tab)
View(tab)
library(ggplot2)
library(dplyr)
library(tidyr)
library(pollstR)
theme_set(theme_bw())
race2012 <- pollstr_polls(topic = '2012-president', after= as.Date("2012-11-3"), max_pages = Inf)
polls <- race2012$questions %>%
filter(topic=="2012-president" & state=="US") %>%
select(choice, value, margin_of_error, observations, id) %>%
filter(choice %in% c("Obama","Romney") & !is.na(margin_of_error)) %>%
spread(choice, value) %>%
left_join(select(race2012$polls, id, pollster, method), by="id") %>%
filter(method!="Internet") %>%
mutate(diff= Obama - Romney) %>%
select(pollster, diff, Obama, Romney, margin_of_error, observations)
arrange(polls,diff) %>% rename( n=observations) %>%
mutate(pollster=ifelse(pollster=="PPP (D-Americans United for Change)","PPP",pollster))
